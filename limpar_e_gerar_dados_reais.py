#!/usr/bin/env python3
"""
Script para limpar a planilha e gerar dados reais da Nuvem Fiscal
"""

import sys
import os
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

from src.exporters.sheets_exporter import GoogleSheetsExporter
from src.config.settings import Settings
from src.main import CNAEProspector

def main():
    print("üßπ LIMPANDO PLANILHA E GERANDO DADOS REAIS")
    print("=" * 50)
    
    # Configura√ß√µes
    settings = Settings()
    
    # 1. Limpar a planilha primeiro
    print("üóëÔ∏è  Limpando planilha...")
    try:
        exporter = GoogleSheetsExporter()
        if exporter.client:
            spreadsheet = exporter.client.open_by_key(settings.GOOGLE_SHEETS_ID)
            worksheet = spreadsheet.get_worksheet(0)
            
            # Limpar todo o conte√∫do
            worksheet.clear()
            print("‚úÖ Planilha limpa com sucesso!")
            
            # Criar cabe√ßalho novo
            headers = [
                "CNPJ", "Raz√£o Social", "Nome Fantasia", "Status",
                "Setor (CNAE)", "Atividade Principal", "Porte Empresa", "Data Abertura",
                "Telefone Principal", "Email Contato", "Endere√ßo Completo",
                "Rua", "N√∫mero", "Bairro", "Cidade", "Estado (UF)", "CEP",
                "Capital Social", "Fonte dos Dados", "Data da Consulta",
                "Lead Score", "Observa√ß√µes", "Respons√°vel", "Status Contato"
            ]
            
            worksheet.update('A1', [headers])
            
            # Formatar cabe√ßalho
            worksheet.format('A1:X1', {
                'backgroundColor': {'red': 0.2, 'green': 0.6, 'blue': 0.8},
                'textFormat': {'bold': True, 'foregroundColor': {'red': 1, 'green': 1, 'blue': 1}},
                'horizontalAlignment': 'CENTER'
            })
            
            print("‚úÖ Cabe√ßalho criado com formata√ß√£o profissional!")
            
        else:
            print("‚ùå Erro: Cliente Google Sheets n√£o configurado")
            return
            
    except Exception as e:
        print(f"‚ùå Erro ao limpar planilha: {e}")
        return
    
    # 2. Gerar dados reais usando CNPJs conhecidos
    print("\nüîç Buscando dados REAIS da Nuvem Fiscal...")
    
    # Lista de CNPJs reais de empresas conhecidas para testar
    cnpjs_reais = [
        "33.000.167/0001-01",  # Petrobras
        "00.000.208/0001-00",  # Banco do Brasil  
        "09.346.601/0001-17",  # Mercado Livre
        "02.558.157/0001-62",  # Magazine Luiza
        "33.014.556/0001-96",  # Ambev
    ]
    
    try:
        prospector = CNAEProspector()
        
        # Obter token da Nuvem Fiscal
        token = prospector.empresa_service._obter_token_nuvem_fiscal()
        if not token:
            print("‚ùå N√£o foi poss√≠vel obter token da Nuvem Fiscal")
            print("‚ÑπÔ∏è  Gerando dados demonstrativos como alternativa...")
            
            # Fallback para dados demonstrativos
            empresas = prospector.buscar_empresas_por_cnae(
                cnae_codigo="5611-2/01",
                uf="MG", 
                cidade="Uberl√¢ndia",
                limite=8
            )
        else:
            print("‚úÖ Token obtido com sucesso!")
            print("üîé Consultando empresas reais...")
            
            empresas_reais = []
            for cnpj in cnpjs_reais:
                print(f"   üìã Consultando CNPJ: {cnpj}")
                empresa = prospector.empresa_service._consultar_cnpj_individual_nuvem_fiscal(token, cnpj)
                if empresa:
                    empresas_reais.append(empresa)
                    print(f"   ‚úÖ {empresa.razao_social}")
                else:
                    print(f"   ‚ùå CNPJ {cnpj} n√£o encontrado")
            
            # Se n√£o encontrou empresas reais, usar dados demonstrativos
            if not empresas_reais:
                print("‚ö†Ô∏è  Nenhuma empresa real encontrada, usando dados demonstrativos...")
                empresas = prospector.buscar_empresas_por_cnae(
                    cnae_codigo="5611-2/01",
                    uf="MG",
                    cidade="Uberl√¢ndia", 
                    limite=8
                )
            else:
                empresas = empresas_reais
        
        # 3. Exportar para Google Sheets
        print(f"\nüìä Exportando {len(empresas)} empresas para Google Sheets...")
        
        url = prospector.sheets_exporter.export_to_specific_sheet(empresas)
        if url:
            print("‚úÖ Dados exportados com sucesso!")
            print(f"üîó URL da planilha: {url}")
            
            # Mostrar resumo dos dados
            print(f"\nüìà RESUMO DOS DADOS:")
            for i, empresa in enumerate(empresas, 1):
                fonte = getattr(empresa, 'fonte', 'N√£o especificada')
                print(f"   {i}. {empresa.razao_social}")
                print(f"      CNPJ: {empresa.cnpj_formatado}")
                print(f"      Fonte: {fonte}")
                print(f"      Telefone: {empresa.telefone_formatado}")
                print(f"      Email: {empresa.email or 'N√£o informado'}")
                print()
                
        else:
            print("‚ùå Falha na exporta√ß√£o para Google Sheets")
            
    except Exception as e:
        print(f"‚ùå Erro durante a busca: {e}")
        import traceback
        print(f"Traceback: {traceback.format_exc()}")

if __name__ == "__main__":
    main()